// base grammar
program = { SOI ~ statements ~ EOI }
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* ~ !keywords }
keywords = { "true" | "false" | "def" | "func" | "do" | "end" | "return" | "while" | "break" | "if" | "then" | "void" }

// statements
statements = { statement* }
statement = _{
	var_define_stmt |
	var_assign_stmt |
	do_block |
	return_stmt |
	call |
	while_stmt |
	break_stmt |
	if_stmt
}

var_define_stmt = { "def" ~ identifier ~ ("=" ~ expression)? }
var_assign_stmt = { identifier ~ "=" ~ expression }
do_block = { "do" ~ statement* ~ "end" }
return_stmt = { "return" ~ expression? }
while_stmt = { "while" ~ expression ~ do_block }
break_stmt = { "break" }

if_stmt = { "if" ~ expression ~ "then" ~ statements ~ if_elseif* ~ if_else? ~ "end" }
	if_elseif = { ("else" ~ "if" | "elseif") ~ expression ~ "then" ~ statements }
	if_else = { "else" ~ statements }

// operators
unary_operator = { "-" | "!" }
binary_operator = { "+" | "-" | "/" | "*" | "%" | "==" | "!=" | "&&" | "||" | ">" | "<" | ">=" | "<=" }

// expressions
expression = { unary_expression | binary_expression | term }
	unary_expression = { unary_operator ~ term }
	binary_expression = { term ~ (binary_operator ~ term)+ }

term = _{ call | function | literal | identifier | "(" ~ expression ~ ")" }

call = { (call_body_empty | call_body_nonempty) ~ "->" ~ expression }
	call_body_empty = { "(" ~ ")" }
	// Note: a rule without parantheses cannot be defined for `expression` call arguments due to left-recursion
	call_body_nonempty = { "(" ~ expression ~ ("," ~ expression)* ~ ")" }

function = { "func" ~ "(" ~ function_def_args? ~ ")" ~ do_block }
	function_def_args = { identifier ~ ("," ~ identifier)* }

// literals
literal = _{ boolean_literal | string_literal | number_literal }

string_literal = { "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
number_literal = @{ ("-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ ("." ~ ASCII_DIGIT+)?) | "0" }
boolean_literal = { "true" | "false" }

// ignored list
line_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

COMMENT = _{ line_comment | block_comment }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }